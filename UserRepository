const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
  username: { 
    type: String, 
    required: true, 
    unique: true,
    trim: true,
    minlength: [3, 'Username must be at least 3 characters long'],
    maxlength: [30, 'Username cannot exceed 30 characters']
  },
  email: { 
    type: String, 
    required: true, 
    unique: true,
    trim: true,
    lowercase: true,
    validate: {
      validator: function(v) {
        return /^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/.test(v);
      },
      message: props => `${props.value} is not a valid email address!`
    }
  },
  password: { 
    type: String, 
    required: true,
    minlength: [8, 'Password must be at least 8 characters long']
  },
  fullName: { 
    type: String, 
    trim: true,
    maxlength: [100, 'Full name cannot exceed 100 characters']
  },
  phoneNumber: { 
    type: String, 
    validate: {
      validator: function(v) {
        return /^[+]?[(]?[0-9]{3}[)]?[-\s.]?[0-9]{3}[-\s.]?[0-9]{4,6}$/.test(v);
      },
      message: props => `${props.value} is not a valid phone number!`
    }
  },
  address: { type: String },
  role: { type: String, enum: ['user', 'admin'], default: 'user' },
  resetPasswordToken: String,
  resetPasswordExpires: Date,
  loginAttempts: { type: Number, required: true, default: 0 },
  lockUntil: { type: Date },
  isActive: { type: Boolean, default: true },
  shippingInfo: { type: mongoose.Schema.Types.ObjectId, ref: 'ShippingInfo' }
}, { timestamps: true });

userSchema.index({ lockUntil: 1 });

const User = mongoose.model('User', userSchema);

class UserRepository {
  async createUser(userData) {
    userData.password = await bcrypt.hash(userData.password, 10);
    return await User.create(userData);
  }

  async findByEmail(email) {
    return await User.findOne({ email });
  }

  async updateUser(userId, updateData) {
    return await User.findByIdAndUpdate(userId, updateData, { new: true });
  }

  async incrementLoginAttempts(user) {
    if (user.lockUntil && user.lockUntil < Date.now()) {
      return user.updateOne({ $set: { loginAttempts: 1 }, $unset: { lockUntil: 1 } });
    }
    const updates = { $inc: { loginAttempts: 1 } };
    if (user.loginAttempts + 1 >= 5 && !user.isLocked) {
      updates.$set = { lockUntil: Date.now() + 5 * 60 * 1000 };
    }
    return user.updateOne(updates);
  }

  async resetLoginAttempts(user) {
    return user.updateOne({ loginAttempts: 0, lockUntil: undefined });
  }
}

module.exports = new UserRepository();
